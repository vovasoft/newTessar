package com.vova.tessarwebserver.Scheduled;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import lombok.extern.slf4j.Slf4j;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.apache.log4j.Logger;
import org.springframework.boot.json.GsonJsonParser;
import org.springframework.boot.json.JsonParser;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import java.io.IOException;
import java.util.List;
import java.util.Map;


/**
 * @author: Vova
 * @create: date 10:32 2018/1/11
 */

@Slf4j
@Component
public class ScheduledAPI {


    public static void main(String[] args) throws IOException {
        Gson gson = new Gson();


        String url= AdConfig.BASEURL+ AdConfig.ACCOUNT_ID+AdConfig.APP +
                "fields="+ AdConfig.ALLINONE +
                "&time_range="+gson.toJson(new TimeRange("2017-12-15","2017-12-31"))+
                "&access_token="+ AdConfig.ACCESS_TOKEN;
        log.info("url:"+url);
        OkHttpClient okHttpClient = new OkHttpClient();
        Request request = new Request.Builder().get().url(url).build();
        Response response = okHttpClient.newCall(request).execute();
        try {
            String res = response.body().string();
            JsonParser jsonParser = new GsonJsonParser();
            Map<String, Object> pm =jsonParser.parseMap(res);
            String json = pm.get("data").toString();
            List<Fb_Ad> fbs = gson.fromJson(json, new TypeToken<List<Fb_Ad>>(){}.getType());
            for (Fb_Ad fb : fbs) {
                System.out.println(fb.getAccount_currency());
            }

//            ArrayList<String> list = (ArrayList<String>) pm.get("data");
//
//            Fb_Ad fa = gson.fromJson(list.get(0),Fb_Ad.class);
//
//            System.out.println(fa.getAccount_currency());

            //


        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    private static final Logger logger = Logger.getLogger(ScheduledAPI.class);
    @Scheduled(cron="0 0/2 8-20 * * ?")
    public void executeFileDownLoadTask() {

        // 间隔2分钟,执行工单上传任务
        Thread current = Thread.currentThread();
        System.out.println("定时任务1:"+current.getId());
        logger.info("ScheduledTest.executeFileDownLoadTask 定时任务1:"+current.getId()+ ",name:"+current.getName());
    }

    @Scheduled(cron="0 0/1 8-20 * * ?")
    public void executeUploadTask() {

        // 间隔1分钟,执行工单上传任务
        Thread current = Thread.currentThread();
        System.out.println("定时任务2:"+current.getId());
        logger.info("ScheduledTest.executeUploadTask 定时任务2:"+current.getId() + ",name:"+current.getName());
    }

    @Scheduled(cron="0 0/3 5-23 * * ?")
    public void executeUploadBackTask() {

        // 间隔3分钟,执行工单上传任务
        Thread current = Thread.currentThread();
        System.out.println("定时任务3:"+current.getId());
        logger.info("ScheduledTest.executeUploadBackTask 定时任务3:"+current.getId()+ ",name:"+current.getName());
    }

}
